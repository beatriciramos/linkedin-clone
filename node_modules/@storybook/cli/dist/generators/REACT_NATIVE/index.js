"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shelljs = _interopRequireDefault(require("shelljs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _helpers = require("../../helpers");

var _baseGenerator = require("../baseGenerator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const generator = async (packageManager, npmOptions, installServer, options) => {
  // set correct project name on entry files if possible
  const dirname = _shelljs.default.ls('-d', 'ios/*.xcodeproj').stdout; // Only notify about app name if running in React Native vanilla (Expo projects do not have ios directory)


  if (dirname) {
    const projectName = dirname.slice('ios/'.length, dirname.length - '.xcodeproj'.length - 1);

    if (projectName) {
      _shelljs.default.sed('-i', '%APP_NAME%', projectName, 'storybook/storybook.js');
    } else {
      (0, _helpers.paddedLog)(_chalk.default.red('ERR: Could not determine project name, to fix: https://github.com/storybookjs/storybook/issues/1277'));
    }
  }

  const packageJson = packageManager.retrievePackageJson();
  const missingReactDom = !packageJson.dependencies['react-dom'] && !packageJson.devDependencies['react-dom'];
  const reactVersion = packageJson.dependencies.react;
  await (0, _baseGenerator.baseGenerator)(packageManager, npmOptions, options, 'react-native', {
    extraPackages: [missingReactDom && reactVersion && `react-dom@${reactVersion}`, installServer && '@storybook/react-native-server'].filter(Boolean),
    addScripts: installServer,
    addComponents: false // We copy template-csf as it's wrapped in a storybook folder

  });
  (0, _helpers.copyTemplate)(__dirname, options.storyFormat);
};

var _default = generator;
exports.default = _default;